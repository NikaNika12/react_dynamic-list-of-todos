{"version":3,"sources":["types/Type.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Type","TodoList","selectedTodo","clickModal","filteredTodos","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","inputValue","onChangeInput","selectValue","onChangeSelect","value","onChange","event","target","All","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","useState","user","setUser","isLoading","setIsLoading","isError","setIsError","useEffect","loadUser","a","loadedUser","href","email","name","App","query","setQuery","todos","setTodos","setSelectedTodo","selectedType","setSelectedType","modalIsOpen","setModalIsOpen","loadTodos","loadedTodos","visibleTodos","useMemo","filter","visibleTitle","toLowerCase","includes","trim","length","todoId","searchedTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef2b80d1.chunk.js","sourcesContent":["export enum Type {\n  All = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  clickModal: (todoId: number) => void,\n  filteredTodos: Todo[]\n};\nexport const TodoList: React.FC<Props> = ({\n  selectedTodo, clickModal, filteredTodos,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {filteredTodos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': selectedTodo?.id === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => clickModal(todo.id)}\n            >\n              {selectedTodo && selectedTodo.id === todo.id ? (\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              ) : (\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              )}\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { Type } from '../../types/Type';\n\ntype Props = {\n  inputValue: string,\n  onChangeInput: (inputValue: string) => void,\n  selectValue: Type,\n  onChangeSelect: React.Dispatch<React.SetStateAction<Type>>\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  inputValue, onChangeInput, selectValue, onChangeSelect,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectValue}\n          onChange={event => onChangeSelect(event.target.value as Type)}\n        >\n          <option value={Type.All}>All</option>\n          <option value={Type.ACTIVE}>Active</option>\n          <option value={Type.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={inputValue}\n        onChange={event => {\n          onChangeInput(event.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {inputValue && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onChangeInput('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUsers = () => get<User[]>('/users');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  clickModal: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, clickModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        setIsLoading(true);\n        const loadedUser = await getUser(userId);\n\n        setUser(loadedUser);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!isLoading && todo) ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clickModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {(!isError && user) ? (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            ) : (\n              <p>User is not found!</p>\n            )}\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Type } from './types/Type';\n\nexport const App: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedType, setSelectedType] = useState<Type>(Type.All);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const loadedTodos = await getTodos();\n\n        setTodos(loadedTodos);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const visibleTitle = todo.title.toLowerCase().includes(query.toLowerCase().trim());\n\n      switch (selectedType) {\n        case Type.ACTIVE:\n          return !todo.completed && visibleTitle;\n        case Type.COMPLETED:\n          return todo.completed && visibleTitle;\n\n        default:\n          return visibleTitle;\n      }\n    });\n  }, [todos, query, selectedType]);\n\n  const showModal = (todoId: number) => {\n    setModalIsOpen(true);\n    const searchedTodo = todos.find(todo => todoId === todo.id);\n\n    if (searchedTodo) {\n      setSelectedTodo(searchedTodo);\n    }\n  };\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                inputValue={query}\n                onChangeInput={setQuery}\n                selectValue={selectedType}\n                onChangeSelect={setSelectedType}\n              />\n            </div>\n\n            {(!isLoading && todos.length) ? (\n              <div className=\"block\">\n                <TodoList\n                  filteredTodos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  clickModal={showModal}\n                />\n              </div>\n            ) : (\n              <Loader />\n            )}\n\n            {(isError && !todos.length)\n              && <p>A server error occurred while uploading the data from server</p>}\n          </div>\n        </div>\n      </div>\n\n      {modalIsOpen && selectedTodo\n        && <TodoModal todo={selectedTodo} clickModal={closeModal} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}